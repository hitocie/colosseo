--- データベース ---
■User テーブル
 [pk] id:int
 - uid:text (from Facebook)
 - name:text (from Facebook)
 - token:text (from facebook)

■Battle テーブル
 [pk] id:int
 - title:text
 - date:date
 - owner:int  [ = user-id ]
 - description:text
 - kind:int [0:トーナメント, 1:リーグ戦, ...]
 - result:text  *注意（下記参照）
 - status:int [50:開催中, 90:終了 ]

■Participants テーブル
 [pk] battle-id
 [pk] user-id


[[注意]]　Battle.result
　JSONで各種typeによってフォーマットが可変。
　それぞれに自由なフォーマットのJSONを送ってもらえれば、
　データベースにそれをそのまま格納します。
　（福井さんか菅原君にフォーマットはお任せ！）


--- APIs ---
＜DTO＞
*User
 -id
 -uid
 -name

*Battle
 -id
 -title
 -date
 -description
 -kind
 -result
 -status
 -owner (= User)
 -participants (= User[])

*BattleKind (enum)
 [0:トーナメント, 1:リーグ戦, ...]

*BattleStatus (enum)
 [10:開催中, 90:終了 ]

＜サービス＞
- boolean is_login(); 
  ログインしているかどうか？

- void logout();
  ログアウト。

- void get_my_friends( callback(User[]) );
  自分の友達をすべて取得。※非同期

- void find_my_battles( {offset: 0, limit: 10}, callback(Battle[]) );
  自分の参加予定のBattleを検索。（ただし、一覧用のため、Battleの項目(id, title, status)のみ取得。）※非同期
　※第一引数は条件（offset, limit, その他要検討）

- void get_my_battle( battle-id, callback(Battle) );
  Battleの詳細を取得。（全項目。）※非同期

- Battle create_new_battle( title, date, description, kind, result, status, participants);
  Battleの新規作成。（戻り値には、idが新規に割り振られ戻ってくる。participantsはUserの配列。）

- void update_result_of_battle( battle-id, result );
  結果の更新。

- void delete_battle( battle-id );
  Battleの削除。（物理削除）＊論理削除にすべき？

[[注意]] See the public/test/index.html.


--- How To Setup(岡田めも) ---
# Create Database
CREATE DATABASE colosseo_dev DEFAULT CHARACTER SET utf8;
## - Edit config/database.yml -

# Create model
rails g model user uid:string name:string token:string
rails g model battle title:string date:date user:references description:text kind:integer result:text status:integer
rails g model participant battle:references user:references
rake db:migrate
rake db:seed

# Create controllers
rails g controller users
rails g controller battles

# Coding (controllers, models and roots)

# Startup Server
rails s
